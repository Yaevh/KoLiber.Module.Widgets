using System;
using Orchard.ContentManagement;
using Orchard.ContentManagement.Drivers;
using KoLiber.Module.Widgets.Models;
using Orchard.ContentManagement.Handlers;
using Orchard.Environment.Extensions;

// This code was generated by Orchardizer

namespace KoLiber.Module.Widgets.Drivers {
    [OrchardFeature("KoLiber.Widgets.Dotpay")]
    public class DotpayDonationFormPartDriver : ContentPartDriver<DotpayDonationFormPart> {

        protected override string Prefix {
            get { return "DotpayDonationFormPart"; }
        }

        protected override DriverResult Display(DotpayDonationFormPart part, string displayType, dynamic shapeHelper) {
            // Put all your driver logic inside this method so that if your part is not being displayed no logic is run. Yay efficiency
            return ContentShape("Parts_DotpayDonationFormPart",
                () => {
                    return shapeHelper.Parts_DotpayDonationFormPart(Model: part);
                });
        }

        protected override DriverResult Editor(DotpayDonationFormPart part, dynamic shapeHelper) {
            return ContentShape("Parts_DotpayDonationFormPart_Edit",
                () => shapeHelper.EditorTemplate(
                    TemplateName: "Parts/DotpayDonationFormPart",
                    Model: part,
                    Prefix: Prefix));
        }

        protected override DriverResult Editor(DotpayDonationFormPart part, IUpdateModel updater, dynamic shapeHelper) {
            updater.TryUpdateModel(part, Prefix, null, null);
            return Editor(part, shapeHelper);
        }

        protected override void Importing(DotpayDonationFormPart part, ImportContentContext context) {
            var partName = part.PartDefinition.Name;
            var _DotpayId = context.Attribute(partName, "DotpayId");
            if (_DotpayId != null) {
                part.DotpayId = Convert.ToInt32(_DotpayId);
            }
            var _SuggestedAmount = context.Attribute(partName, "SuggestedAmount");
            if (_SuggestedAmount != null) {
                part.SuggestedAmount = Convert.ToDouble(_SuggestedAmount);
            }
            var _Purpose = context.Attribute(partName, "Purpose");
            if (_Purpose != null) {
                part.Purpose = _Purpose;
            }
            var _ReturnUrl = context.Attribute(partName, "ReturnUrl");
            if (_ReturnUrl != null) {
                part.ReturnUrl = _ReturnUrl;
            }
        }

        protected override void Exporting(DotpayDonationFormPart part, ExportContentContext context) {
            context.Element(part.PartDefinition.Name).SetAttributeValue("DotpayId", part.DotpayId);
            context.Element(part.PartDefinition.Name).SetAttributeValue("SuggestedAmount", part.SuggestedAmount);
            context.Element(part.PartDefinition.Name).SetAttributeValue("Purpose", part.Purpose);
            context.Element(part.PartDefinition.Name).SetAttributeValue("ReturnUrl", part.ReturnUrl);
        }
    }
}